<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.reserve.app.mapper.AdminMapper">

	<select id="getBranchNameList" parameterType="map"  resultType="map">
		SELECT tb_branch_mng.branch_code, branch_name
		FROM tb_branch_mng, tb_user
		WHERE 
			tb_branch_mng.branch_code != 'b0000'
			AND tb_user.user_role like 'SUPERADMIN'
		ORDER BY tb_branch_mng.branch_code
	</select>
	<!--=============== 회원 관리 ===============-->
	<select id="getUserList" parameterType="map" resultType="map">
		SELECT
			a.id, a.name, a.phone_number, a.due_date, a.user_role, a.massage_cnt, a.massage_total, coalesce(b.has_reservation,0) as massage_reservation_cnt,
			CASE
				WHEN b.has_reservation = a.massage_total and massage_cnt = 0 THEN 'Y'
				ELSE 'N'
			END AS reserve_cnt_status,
			TO_CHAR(a.created_dt, 'YYYY-MM-DD') AS created_dt,
			a.remark,
			a.branch_code
		FROM tb_user a
		LEFT OUTER JOIN
			(
				SELECT user_id, branch_code, COUNT(*) AS has_reservation
				FROM tb_reservation_list
				GROUP BY user_id, branch_code) b ON a.branch_code = b.branch_code AND a.id = b.user_id
		<where>
			a.user_role LIKE 'USER'
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					AND a.branch_code = #{branch_code}
				</when>
				<otherwise>
					AND a.branch_code = #{super_branch_code}
				</otherwise>
			</choose>
			<if test='userIdOrName != null and userIdOrName != ""'>
				AND (
					UPPER(a.id) LIKE '%' || UPPER(#{userIdOrName}) || '%'
					OR UPPER(a.name) LIKE '%' || UPPER(#{userIdOrName}) || '%'
				)
			</if>
			<if test='phoneNumber!=null and phoneNumber!=""'>
				AND a.phone_number LIKE '%' || UPPER(#{phoneNumber}) || '%'
			</if>
			<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
				AND a.created_dt BETWEEN TO_TIMESTAMP(#{startDate}, 'YYYY-MM-DD') AND TO_TIMESTAMP(#{endDate}, 'YYYY-MM-DD') + INTERVAL '1 day' - INTERVAL '1 second'
			</if>
			<if test="rsv_status != null and rsv_status != ''">
				<choose>
					<when test="rsv_status == 'Y'.toString()">
						AND a.massage_cnt = 0
					</when>
					<otherwise>
						AND a.massage_cnt <![CDATA[>]]> 0
					</otherwise>
				</choose>
			</if>
			
		</where>
		ORDER BY a.created_dt DESC, a.id ASC
	</select>
	
	<update id="resetPassword" parameterType="map">
		update tb_user
		set password = #{user_pw},
			modified_dt = now(),
			modified_id = #{login_id}
		where id = #{user_id}
	</update>
	
	<update id="updateAccount" parameterType="map">
		update tb_user
		set id = #{id},
			name = #{name},
			phone_number = #{phone_number},
			due_date = #{due_date},
			user_status = #{user_status},
			massage_total = #{massage_total},
			massage_cnt = #{massage_cnt},
			remark = #{remark},
			modified_id = #{login_id},
			modified_dt = now()
		where id = #{id}
	</update>

	<select id="checkId" parameterType="map" resultType="int">
		SELECT count(id)
		FROM tb_user
		WHERE 	id = #{id}
	</select>
	<!--=============== 지점 관리 ===============-->
	<select id="getBranchList" parameterType="map"  resultType="map">
		SELECT	seq_no,
				tu.id,
				tu.user_status,
				tbm.branch_code as branch_code_col, 
				tbm.branch_name, 
				join_code,
				to_char(tbi.created_dt,'YYYY-MM-DD') as created_dt, 
				tbi.branch_tel,
				tbi.branch_addr,
				tbi.business_hours,
				std_due_date
		FROM tb_branch_mng tbm 
				join tb_branch_info tbi on tbm.branch_code = tbi.branch_code
				join tb_user tu on tbm.branch_code = tu.branch_code and tu.user_role = 'ADMIN'
		<where>
			tbm.branch_code != 'b0000'
			<if test='branchName!=null and branchName!=""'>and tbm.branch_name like '%'|| #{branchName} ||'%'</if>
			<if test='adminId!=null and adminId!=""'>and tu.id like '%'|| #{adminId} ||'%'</if>
			<if test='joinCode!=null and joinCode!=""'>and join_code like '%'|| #{joinCode} ||'%'</if>
			<if test='userStatus!=null and userStatus!=""'>and user_status like '%'|| #{userStatus} ||'%'</if>
		</where>
		ORDER BY tbm.branch_code;
	</select>
	
	<insert id="addBranchInfo" parameterType="map">
		insert into tb_branch_mng (
			branch_name, join_code, created_id, created_dt, modified_id, modified_dt
		)
		values (
			#{branch_name}, #{join_code}, #{login_id}, now(), #{login_id}, now()
		);
		insert into tb_branch_info (
			branch_name, branch_tel, std_due_date, created_id, created_dt, modified_id, modified_dt, branch_code
		)
		values (
			#{branch_name}, #{branch_tel}, #{std_due_date}, #{login_id}, now(), #{login_id}, now(), 
			(select branch_code from tb_branch_mng where branch_name=#{branch_name})
		);
		insert into tb_user (
			id, password, name, user_role, user_status, phone_number, created_id, created_dt, modified_id, modified_dt, branch_code
		)
		values(
			#{id}, #{encpwd}, #{branch_name}, 'ADMIN', 'Y', #{branch_tel}, #{login_id}, now(), #{login_id}, now(),
			(select branch_code from tb_branch_mng where branch_name=#{branch_name})
		);
		insert into tb_reservation_info (
			rsv_month, created_id, created_dt, modified_id, modified_dt, branch_code
		)
		values(
			'2023-00', #{login_id}, now(), #{login_id}, now(),
			(select branch_code from tb_branch_mng where branch_name=#{branch_name})
		);
	</insert>
	
	<update id="updateBranchInfo" parameterType="map">
		update tb_branch_info
		set 
			branch_name = #{branch_name},
			branch_tel = #{branch_tel},
			branch_addr = #{branch_addr},
			business_hours = #{business_hours},
			std_due_date = #{std_due_date},
			modified_id = #{login_id},
			modified_dt = now()
		where
			branch_code = (select branch_code from tb_branch_mng where join_code=#{join_code});
		
		update tb_branch_mng
		set
			branch_name = #{branch_name},
			modified_id = #{login_id}, 
			modified_dt = now()
		where 
			branch_code = (select branch_code from tb_branch_mng where join_code=#{join_code});
			
		update tb_user
		set
			name = #{branch_name},
			phone_number = #{branch_tel},
			modified_id = #{login_id}, 
			modified_dt = now()
		where
			branch_code = (select branch_code from tb_branch_mng where join_code=#{join_code});
	</update>
	
	<delete id="deleteBranchInfo" parameterType="map">
		delete from tb_branch_mng where seq_no=#{seq_no}
	</delete>
	
	<update id="resetMngPwd" parameterType="map">
		update tb_user
		set password = #{password},
			modified_dt = now(),
			modified_id = #{login_id}
		where id = #{manager_id}
	</update>
	
	<update id="updateManager" parameterType="map">
		update tb_branch_info
		set 
			branch_name = #{branch_name},
			modified_id = #{login_id},
			modified_dt = now()
		where
			branch_code = (select branch_code from tb_branch_mng where join_code=#{join_code});
		
		update tb_branch_mng
		set
			branch_name = #{branch_name},
			modified_id = #{login_id}, 
			modified_dt = now()
		where 
			branch_code = (select branch_code from tb_branch_mng where join_code=#{join_code});
			
		update tb_user
		set
			id = #{id},
			name = #{branch_name},
			user_status = #{user_status},
			modified_id = #{login_id},
			modified_dt = now()
		where
			branch_code = (select branch_code from tb_branch_mng where join_code=#{join_code});
	</update>
	<!--=============== 지점 관리 ===============-->
	<select id="getReservationMasterData" parameterType="map"  resultType="map">
		SELECT
			a.branch_code,
			a.rsv_month,
			a.rsv_date,
			c.worker_num,
			a."1t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't1') AS "1t_cnt",
			a."2t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't2') AS "2t_cnt",
			a."3t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't3') AS "3t_cnt",
			a."4t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't4') AS "4t_cnt",
			a."5t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't5') AS "5t_cnt",
			a."6t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't6') AS "6t_cnt",
			a."7t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't7') AS "7t_cnt",
			a."8t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't8') AS "8t_cnt",
			a."9t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't9') AS "9t_cnt",
			a."10t",
			COUNT(b.select_time) FILTER (WHERE b.select_time = 't10') AS "10t_cnt"
		FROM tb_reservation_master a
			JOIN tb_reservation_info c on a.rsv_month =c.rsv_month  AND a.branch_code = c.branch_code 
			LEFT OUTER JOIN tb_reservation_list b on a.branch_code = b.branch_code AND a.rsv_month = b.rsv_month AND a.rsv_date = b.rsv_date
		<where>
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					a.branch_code = #{branch_code} and a.rsv_month = #{rsv_month}
				</when>
				<otherwise>
					a.branch_code = #{super_branch_code} and a.rsv_month = #{rsv_month}
				</otherwise>
			</choose>
		</where>
		GROUP BY
			a.branch_code,
			a.rsv_month,
			a.rsv_date,
			c.worker_num
		ORDER BY
			a.rsv_month,
			a.rsv_date
	</select>

	<insert id="addReservationMasterData" parameterType="list">
		insert into tb_reservation_master (
			branch_code, rsv_month, rsv_date,
			"1t", "2t", "3t", "4t", "5t", 
			"6t", "7t", "8t", "9t", "10t", 
			created_id, created_dt, modified_id, modified_dt
		)
		values 
		<foreach collection="list" item="item" separator=",">
			(
				#{branch_code}, #{item.rsv_month}, #{item.rsv_date},
				#{item.1t}, #{item.2t}, #{item.3t}, #{item.4t}, #{item.5t},
				#{item.6t}, #{item.7t}, #{item.8t}, #{item.9t}, #{item.10t},
				#{login_id}, now(), #{login_id}, now()
			)
		</foreach>
	</insert>

	<delete id="deleteReservationMasterData" parameterType="string">
		delete from tb_reservation_master 
		where branch_code=#{branch_code} and rsv_month=#{stdMonth}
	</delete>
	
	<select id="getCntBranchReservationInfo" parameterType="map"  resultType="int">
		SELECT count(branch_code)
		FROM tb_reservation_info
		<where>
			rsv_month = #{rsv_month}
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					and branch_code = #{branch_code}
				</when>
				<otherwise>
					and branch_code = #{super_branch_code}
				</otherwise>
			</choose>
		</where>
	</select>
	
	<select id="getBranchReservationInfo" parameterType="map"  resultType="map">
		SELECT worker_num, t1_name, t2_name, t3_name, t4_name, t5_name, t6_name, t7_name, t8_name, t9_name, t10_name
		FROM tb_reservation_info
		<where>
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					AND branch_code = #{branch_code}
				</when>
				<otherwise>
					AND branch_code = #{super_branch_code}
				</otherwise>
			</choose>
		</where>
		ORDER BY rsv_month desc
		limit 1
	</select>
	
	<insert id="addbranchReservationInfo" parameterType="map">
		INSERT into tb_reservation_info (
			branch_code, rsv_month, worker_num,
			t1_name, t2_name, t3_name, t4_name, t5_name,
			t6_name, t7_name, t8_name, t9_name, t10_name,
			created_id, created_dt, modified_id, modified_dt
		)
		VALUES (
			#{branch_code}, #{rsv_month}, #{worker_num}::int,
			#{t1_name}, #{t2_name}, #{t3_name}, #{t4_name}, #{t5_name},
			#{t6_name}, #{t7_name}, #{t8_name}, #{t9_name}, #{t10_name},
			#{login_id}, now(), #{login_id}, now()
		)
	</insert>
	
	<update id="updatebranchReservationInfo" parameterType="map">
		UPDATE tb_reservation_info
		SET 
			worker_num = #{worker_num}::int,
			t1_name = #{t1_name},
			t2_name = #{t2_name},
			t3_name = #{t3_name},
			t4_name = #{t4_name},
			t5_name = #{t5_name},
			t6_name = #{t6_name},
			t7_name = #{t7_name},
			t8_name = #{t8_name},
			t9_name = #{t9_name},
			t10_name = #{t10_name},
			modified_id = #{login_id},
			modified_dt = now()
		WHERE branch_code = #{branch_code} and rsv_month = #{rsv_month}
	</update>
	
	<select id="getCalendarEvent" parameterType="map"  resultType="map">
		SELECT TO_CHAR(date_series.rsv_date, 'YYYY-MM-DD') AS rsv_date, COALESCE(reservation_cnt, 0) reservation_cnt
		FROM (
			SELECT generate_series(
				TO_DATE(#{rsv_month}, 'YYYY-MM')::DATE,
				(TO_DATE(#{rsv_month}, 'YYYY-MM') + INTERVAL '1 month' - INTERVAL '1 day')::DATE,
				INTERVAL '1 day'
			) AS rsv_date
		) date_series
		LEFT JOIN (
			select rsv_date, count(rsv_date) reservation_cnt
			from tb_reservation_list
			<where>
				rsv_month like #{rsv_month}
				<choose>
					<when test="super_branch_code == null or super_branch_code == ''">
						and branch_code = #{branch_code}
					</when>
					<otherwise>
						and branch_code = #{super_branch_code}
					</otherwise>
				</choose>
			</where>
			group by rsv_date
		) reservations ON date_series.rsv_date = reservations.rsv_date::date
		ORDER BY date_series.rsv_date;
	</select>
	
	<select id="getSeletedDateReservationList" parameterType="map"  resultType="map">
		SELECT rsv_date, a.user_id, 
				CASE 
					WHEN a.select_time = 't1' THEN b."t1_name"
					WHEN a.select_time = 't2' THEN b."t2_name"
					WHEN a.select_time = 't3' THEN b."t3_name"
					WHEN a.select_time = 't4' THEN b."t4_name"
					WHEN a.select_time = 't5' THEN b."t5_name"
					WHEN a.select_time = 't6' THEN b."t6_name"
					WHEN a.select_time = 't7' THEN b."t7_name"
					WHEN a.select_time = 't8' THEN b."t8_name"
					WHEN a.select_time = 't9' THEN b."t9_name"
					WHEN a.select_time = 't10' THEN b."t10_name"
				END AS "reservation_time"
		FROM tb_reservation_list a
		JOIN tb_reservation_info b ON a.branch_code = b.branch_code AND a.rsv_month = b.rsv_month
		<where>
			a.rsv_date = #{rsv_date}
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					and a.branch_code = #{branch_code}
				</when>
				<otherwise>
					and a.branch_code = #{super_branch_code}
				</otherwise>
			</choose>
		</where>
	</select>
	
	<select id="getBranchPrintInfo" parameterType="map"  resultType="map">
		SELECT a.branch_name, a.branch_tel, a.branch_addr, a.business_hours, b.join_code
		FROM tb_branch_info a
		LEFT OUTER JOIN tb_branch_mng b on a.branch_code = b.branch_code 
		<where>
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					and a.branch_code = #{branch_code}
				</when>
				<otherwise>
					and a.branch_code = #{super_branch_code}
				</otherwise>
			</choose>
		</where>
	</select>
	
	<update id="saveBranchInfo" parameterType="map">
		UPDATE tb_branch_info
		SET 
			branch_name = #{branch_name},
			branch_tel = #{branch_tel},
			branch_addr = #{branch_addr},
			business_hours = #{business_hours},
			modified_id = #{login_id},
			modified_dt = now()
		WHERE branch_code = #{branch_code}
	</update>
	<!--=============== 예약 현황 조회 ===============-->	
	<select id="getReservationStatusList" parameterType="map" resultType="map">
		SELECT rsv_date, a.user_id, 
			c."name", c.phone_number, c.due_date, c.user_status, c.massage_cnt, c.remark, c.massage_total,
			coalesce(la.has_reservation,0) as massage_reservation_cnt, a.rsv_status,
			TO_CHAR(c.created_dt, 'YYYY-MM-DD') AS created_dt,
				TO_CHAR(a.created_dt, 'YYYY-MM-DD') AS created_dt, a.select_time,
				CASE 
					WHEN a.select_time = 't1' THEN b."t1_name"
					WHEN a.select_time = 't2' THEN b."t2_name"
					WHEN a.select_time = 't3' THEN b."t3_name"
					WHEN a.select_time = 't4' THEN b."t4_name"
					WHEN a.select_time = 't5' THEN b."t5_name"
					WHEN a.select_time = 't6' THEN b."t6_name"
					WHEN a.select_time = 't7' THEN b."t7_name"
					WHEN a.select_time = 't8' THEN b."t8_name"
					WHEN a.select_time = 't9' THEN b."t9_name"
					WHEN a.select_time = 't10' THEN b."t10_name"
				END AS "reservation_time"
		FROM tb_reservation_list a
		JOIN tb_reservation_info b ON a.branch_code = b.branch_code AND a.rsv_month = b.rsv_month
		JOIN tb_user c on a.user_id = c."id"
		LEFT OUTER JOIN
			(
				SELECT user_id, branch_code, COUNT(*) AS has_reservation
				FROM tb_reservation_list
				GROUP BY user_id, branch_code) la ON c.branch_code = la.branch_code AND c.id = la.user_id
		<where>
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					AND a.branch_code = #{branch_code}
				</when>
				<otherwise>
					AND a.branch_code = #{super_branch_code}
				</otherwise>
			</choose>
			<if test='userIdOrName != null and userIdOrName != ""'>
				AND (
					UPPER(a.user_id) LIKE '%' || UPPER(#{userIdOrName}) || '%'
					OR UPPER(a.user_id) LIKE '%' || UPPER(#{userIdOrName}) || '%'
				)
			</if>
			<if test='phoneNumber!=null and phoneNumber!=""'>
				AND c.phone_number LIKE '%' || UPPER(#{phoneNumber}) || '%'
			</if>
			<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
				AND rsv_date::date BETWEEN TO_TIMESTAMP(#{startDate}, 'YYYY-MM-DD') AND TO_TIMESTAMP(#{endDate}, 'YYYY-MM-DD') + INTERVAL '1 day' - INTERVAL '1 second'
			</if>
			<if test='rsv_status != null and rsv_status != ""'>
				AND (
					rsv_status = #{rsv_status}
				)
			</if>
		</where>
		ORDER BY rsv_date
	</select>
	
	<select id="getReservationModal" parameterType="map" resultType="map">
		<foreach collection="timeSlots" item="timeSlot" separator="UNION ALL">
			SELECT
				't${timeSlot}' AS col,
				(	SELECT "${timeSlot}t"
					FROM tb_reservation_master 
					<where>
						rsv_month = #{rsv_month} AND rsv_date = #{rsv_date}
						<choose>
							<when test="super_branch_code == null or super_branch_code == ''">
								and branch_code = #{branch_code}
							</when>
							<otherwise>
								and branch_code = #{super_branch_code}
							</otherwise>
						</choose>
					</where>
				)
				<![CDATA[-]]>
				(	SELECT COUNT(*)
					FROM tb_reservation_list
					<where>
						rsv_month = #{rsv_month} AND rsv_date = #{rsv_date} AND select_time = 't${timeSlot}'
						<choose>
							<when test="super_branch_code == null or super_branch_code == ''">
								and branch_code = #{branch_code}
							</when>
							<otherwise>
								and branch_code = #{super_branch_code}
							</otherwise>
						</choose>
					</where>
				) AS cnt,
				(	SELECT "t${timeSlot}_name"
					FROM tb_reservation_info tri 
					<where>
						rsv_month = #{rsv_month}
						<choose>
							<when test="super_branch_code == null or super_branch_code == ''">
								and branch_code = #{branch_code}
							</when>
							<otherwise>
								and branch_code = #{super_branch_code}
							</otherwise>
						</choose>
					</where>
				) as rsv_time
		</foreach>
	</select>
	
	<delete id="removeReservationByAdmin" parameterType="map">
		delete from tb_reservation_list
		where user_id = #{user_id} and rsv_date = #{rsv_date} and select_time = #{select_time}
	</delete>
	
	<update id="changeMagCnt" parameterType="map">
		UPDATE tb_user
		<set>
			<if test="flag == 'i'.toString()">
				massage_cnt = massage_cnt - 1
			</if>
			<if test="flag == 'd'.toString()">
				massage_cnt = massage_cnt + 1
			</if>
		</set>
		WHERE id = #{user_id}
	</update>
	
	<insert id="saveCancelLog" parameterType="map">
		INSERT INTO tb_cancel_log(
			branch_code, rsv_date, select_time, created_id, created_dt, reservation_id
		)
		VALUES(
			#{branch_code}, #{rsv_date}, #{select_time}, #{login_id}, now(), #{user_id}
		)
	</insert>
	
	<select id="getRecentlyBranchReservationInfo" parameterType="map" resultType="map">
		SELECT rsv_month, t1_name, t2_name, t3_name, t4_name, t5_name, t6_name, t7_name, t8_name, t9_name, t10_name
		FROM tb_reservation_info
		<where>
			<choose>
				<when test="super_branch_code == null or super_branch_code == ''">
					and branch_code = #{branch_code}
				</when>
				<otherwise>
					and branch_code = #{super_branch_code}
				</otherwise>
			</choose>
		</where>
		ORDER BY rsv_month desc
		limit 1
	</select>
	
	<update id="updateRsvStatus" parameterType="map">
		UPDATE tb_reservation_list
		SET rsv_status = #{rsv_status}
		WHERE user_id = #{user_id} and select_time = #{select_time} and rsv_date = #{rsv_date}
	</update>
</mapper>